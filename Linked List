#include <stdio.h>
#include <stdlib.h>

void creat_list(int n);
void traverse_list();
void insert_a_new_node_at_beginning();
void insert_a_new_node_at_end();
void insert_a_new_node_at_middle(int n);
void deleat_node_from_beginning();
void deleating_node_from_the_last_of_linked_list();
void deleating_node_from_the_middle_of_linked_list(int n);

struct node 
    {
    int data;
    struct node *next;
    } *head;


int main()
{
    int n,opt1,opt2;

    printf("First of all create a linked list\nEnter the number of node in linked list\n");
    scanf("%d",&n);

    creat_list(n);

    printf("Choose option:\n1. For traversing a linked list.\n2. For deleating node form the beginning of linked list.\n3. For deleating node from the last of linked list.\n4. For deleating node from the middle of the linked list.\n5. For inserting a new node at the beginning of the linked list.\n6. For inserting a new node at the middle position of the linked list.\n7. For inserting a new node at the end of linked list.");
    scanf("%d",&opt1);

    opt2=1;
    while(opt2==1)
    {
        switch (opt1)
        {
            case 1:
                traverse_list(head);
                break;

            case 2:
                deleat_node_from_beginning();
                break;

            case 3:
                deleating_node_from_the_last_of_linked_list();
                break;

            case 4:
                deleating_node_from_the_middle_of_linked_list(n);
                break;
                
            case 5:
                insert_a_new_node_at_beginning();
                break;
                
            case 6:
                insert_a_new_node_at_middle(n);
                break;
                
            case 7:
                insert_a_new_node_at_end();
                break;

            default:
                printf("Choose appropriate option\n");
                printf("\nChoose option:\n1. For traversing a linked list.\n2. For deleating node form the beginning of linked list.\n3. For deleating node from the last of linked list.\n4. For deleating node from the middle of the linked list.\n5. For inserting a new node at the beginning of the linked list.\n6. For inserting a new node at the middle position of the linked list.\n7. For inserting a new node at the end of linked list.");
                scanf("%d",&opt1);
                continue;
        }
        printf("\n\nYou want to check the changes in linked list:\nchoose option:\n1. yes\n2. No\n");
        scanf("%d",&opt2);
        
        if (opt2==2)
        {
            printf("\n Thankyou..\n");
            break;
        }
        else
        {
            printf("\nChoose option:\n1. For traversing a linked list.\n2. For deleating node form the beginning of linked list.\n3. For deleating node from the last of linked list.\n4. For deleating node from the middle of the linked list.\n5. For inserting a new node at the beginning of the linked list.\n6. For inserting a new node at the middle position of the linked list.\n7. For inserting a new node at the end of linked list.\n");
            scanf("%d",&opt1);
        }
    }
    return 0;
}

void creat_list(int n)
{
    struct node *new_node, *temp;
    int data;

    head = (struct node *) malloc (sizeof (struct node *));
    
    if (head == NULL)
    {
        printf("No space inside memory\n");
        exit(0);
    }

    printf("Enter the value of data for node 1\n");
    scanf("%d",&data);

    head ->data = data;

    temp=head;

    for (int i=2; i<=n; i++)
    {
        new_node = (struct node *) malloc (sizeof (struct node *));

        if (new_node == NULL)
        {
            printf("No space inside memory\n");
            break;
        }

        printf("Enter the data for the node %d\n",i);
        scanf("%d",&data);

        new_node ->data=data;
        new_node ->next=NULL;

        temp ->next=new_node;
        temp=new_node;
        
    }
    printf("\n\nCreating.....\n\nYour linked list is successfully created\n\n");
}

void traverse_list()
{
    struct node *temp;
    
    temp=head;

    printf("\nTraversing.....\n\nData in list\n");
    int i=1;
    while (temp!=NULL)
    {
        printf("Data in %d nodes is %d\n",i,temp->data);
        i+=1;
        temp=temp->next;
    }
    if (head==NULL)
    {
        printf("\n List is empty.\nList is not contain any node or data.\n");
    }
    printf("\nYou successfully traverse your list.");
}

void deleat_node_from_beginning()
{
    printf("\nDeleating.......\n\n");

    struct node *temp;

    temp=head;
    head=head->next;
    free(temp);

    printf("Your node is successfully deleated.\n");
}

void deleating_node_from_the_last_of_linked_list()
{
    printf("\nDeleating.......\n\n");

    struct node *temp,*temp2;

    temp=head;
    while (temp != NULL)
    {
        temp = temp->next;
        temp2 = temp->next;
        if (temp2->next == NULL)
        {
            temp->next = NULL;
            free (temp2);
            break;
        }
    }
    
    printf("Your node is successfully deleated.\n");
    
}

void deleating_node_from_the_middle_of_linked_list(int n)
{
    int pos;
    
    while(1)
    {
        printf("\nEnter the position of the node where you want to be insert a new node.\n");
        scanf("%d",&pos);
        
        if (pos == n+1 || pos <= 1)
        {
            printf("Enter the correct position where you want to insert a new node");
        }
        else
        {
            break;
        }
    }
    
    printf("\nDeleating....\n");
    
    struct node *temp,*temp2;
    temp=head;
    for (int i=1 ; i<pos-1 ; i++)
    {
        temp=temp->next;
        temp2=temp->next;
    }
    temp->next=temp2->next;
    free(temp2);
    
    printf("\nYour node is succeccfully deleated.\n");
}

void insert_a_new_node_at_beginning()
{
    struct node *new_node;
    int data;
    
    printf("Enter the value of data of node which you want to insert.\n");
    scanf("%d",&data);

    printf("\nInserting...");
    
    new_node = (struct node *) malloc (sizeof (struct node *));
    new_node->data = data;
    new_node->next = head;
    head = new_node;
    
    printf("\n\nYour node is successfully created and inserted at the beginning of the linked list.\n");
}

void insert_a_new_node_at_end()
{
    struct node *new_node,*temp;
    int data;
    
    printf("Enter the value of data of node which you want to insert\n");
    scanf("%d",&data);
    
    printf("\nInserting...\n");
    
    new_node = (struct node *) malloc (sizeof (struct node *));
    new_node->data = data;
    
    temp=head;
    while(temp != NULL)
    {
        temp = temp->next;
        if (temp->next == NULL)
        {
            temp->next = new_node;
            break;
        }
    }
    
    printf("\nYour node is successfully is created and inserted at the end of the linked list.\n");
}

void insert_a_new_node_at_middle(int n)
{
    struct node *new_node,*temp;
    int pos,data;
    temp=head;
    
    while(1)
    {
        printf("\nEnter the position of the node where you want to be insert a new node.\n");
        scanf("%d",&pos);
        
        if (pos == n+1 || pos <= 1)
        {
            printf("Enter the correct position where you want to insert a new node");
        }
        else
        {
            break;
        }
    }
    
    printf("Enter the value of data of node which you want to be insert.\n");
    scanf("%d",&data);
    
    printf("\nInserting...\n");
    
    new_node = (struct node *) malloc (sizeof (struct node * ));
    new_node->data = data;
    
    for (int i = 1 ; i<pos-1 ; i++)
    {
        temp = temp->next;
    }
    
    new_node->next = temp->next;
    temp->next = new_node;

    printf("\nYour node is successfully created and inserted at the beginning of the linked list.\n");
}
